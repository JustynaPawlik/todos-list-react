{"version":3,"sources":["theme.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Header/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","GlobalStyle.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["theme","color","teal","lightTeal","activeTeal","disabled","gray","white","green","lightGreen","red","lightRed","boxShadow","breakpoint","mobile","FormElement","styled","form","FormInput","input","FormButton","button","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","value","ref","type","className","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","Button","toggleDone","remove","TaskList","removeTask","useSelector","map","task","onClick","Header","title","ButtonsList","div","Buttons","setAllDone","length","every","SectionElement","section","SectionHeader","header","SectionTitle","h2","SectionBody","Section","body","extraHeaderConntent","ContainerElement","main","Container","children","GlobalStyle","createGlobalStyle","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById"],"mappings":"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","file":"static/js/main.438a78b6.chunk.js","sourcesContent":["export const theme = {\r\n    color: {\r\n    teal: \"hsl(180, 100%, 25%)\",\r\n    lightTeal: \"hsl(180, 100%, 30%)\",\r\n    activeTeal: \"hsl(180, 100%, 35%)\",\r\n    disabled: \"#ccc\",\r\n    gray: \"#aaa\",\r\n    white: \"#fff\",\r\n    green: \"hsl(120, 61%, 34%)\",\r\n    lightGreen: \"hsl(120, 61%, 39%)\",\r\n    red: \"hsl(348, 83%, 47%)\",\r\n    lightRed: \"hsl(348, 83%, 52%)\",\r\n    boxShadow: \"#ddd\",\r\n    },\r\n    breakpoint: {\r\n    mobile : 767\r\n    },\r\n};","import styled from \"styled-components\";\r\n\r\nexport const FormElement = styled.form`\r\n    display: flex;\r\n    grid-column: 2;\r\n    margin: 10px 0;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        flex-direction: column;\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n    flex-grow: 4;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    margin-left: 20px;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        margin: 0 0 10px;\r\n        width: 90%;\r\n    }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    padding: 10px;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        margin-bottom: 10px;\r\n        width: 90%;\r\n    }\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(({id}) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n    },\r\n});\r\nexport const { addTask, toggleHideDone, toggleTaskDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormElement, FormButton, FormInput } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done:false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormElement onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie</FormButton>\r\n        </FormElement>\r\n    );\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    padding: 10px;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.gray};\r\n    margin-bottom: 10px;\r\n    align-items: center;\r\n    word-break: break-all;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = ({ removeTask }) => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => removeTask(task.id)}\r\n                    >\r\n                        &#128465;\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","const Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsList = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 14px; \r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    background: transparent;\r\n    transition: 0.3s;\r\n    \r\n    &:hover {\r\n            color: ${({ theme }) => theme.color.lightTeal};;\r\n        }\r\n\r\n    &: active: {\r\n        color: ${({ theme }) => theme.color.activeTeal};;\r\n    }\r\n\r\n    &: disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone } from \"../tasksSlice\";\r\nimport { ButtonsList, Button } from \"./styled\";\r\n\r\nexport const Buttons = ({ setAllDone }) => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n    <ButtonsList>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={() => dispatch(toggleHideDone())}>\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </ButtonsList>\r\n)\r\n};\r\n\r\n\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const SectionElement = styled.section`\r\n    margin: 10px 0;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.boxShadow};\r\n    }\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    margin: 0;\r\n    font-size: 22px;\r\n    border-bottom: 1px solid rgb(240, 236, 236);\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\nfont-size: 22px;\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        padding-bottom: 20px;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n}\r\n`;","import { SectionElement, SectionHeader, SectionTitle, SectionBody } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderConntent }) => (\r\n    <SectionElement>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderConntent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const ContainerElement = styled.main`\r\n    max-width: 900px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n}\r\n`;","import { ContainerElement } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <ContainerElement>\r\n        {children}\r\n    </ContainerElement>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    background-color: rgb(240, 236, 236);\r\n    font-family: 'Montserrat', sans-serif;\r\n  }\r\n`;","import styled, { ThemeProvider } from \"styled-components\";\nimport { theme } from \"../../theme\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Header from \"../../common/Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Container from \"../../common/Container\";\nimport { GlobalStyle } from \"../../GlobalStyle\";\n\nfunction Tasks() {\n  return (\n    <ThemeProvider theme={theme}>\n    <Container>\n      <GlobalStyle />\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderConntent={<Buttons />}\n      />\n    </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\"; \n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}