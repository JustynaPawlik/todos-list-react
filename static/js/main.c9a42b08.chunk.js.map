{"version":3,"sources":["theme.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","common/Header/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","GlobalStyle.js","features/tasks/Tasks.js","useTasks.js","App.js","reportWebVitals.js","index.js"],"names":["theme","color","teal","lightTeal","activeTeal","disabled","gray","white","green","lightGreen","red","lightRed","boxShadow","breakpoint","mobile","FormElement","styled","form","FormInput","input","FormButton","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","value","ref","type","className","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","done","Button","toggleDone","remove","TaskList","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","content","Header","title","ButtonsList","div","Buttons","toggleHideDone","setAllDone","length","every","SectionElement","section","SectionHeader","header","SectionTitle","h2","SectionBody","Section","body","extraHeaderConntent","ContainerElement","main","Container","children","GlobalStyle","createGlobalStyle","Tasks","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.c9a42b08.chunk.js","sourcesContent":["export const theme = {\r\n    color: {\r\n    teal: \"hsl(180, 100%, 25%)\",\r\n    lightTeal: \"hsl(180, 100%, 30%)\",\r\n    activeTeal: \"hsl(180, 100%, 35%)\",\r\n    disabled: \"#ccc\",\r\n    gray: \"#aaa\",\r\n    white: \"#fff\",\r\n    green: \"hsl(120, 61%, 34%)\",\r\n    lightGreen: \"hsl(120, 61%, 39%)\",\r\n    red: \"hsl(348, 83%, 47%)\",\r\n    lightRed: \"hsl(348, 83%, 52%)\",\r\n    boxShadow: \"#ddd\",\r\n    },\r\n    breakpoint: {\r\n    mobile : 767\r\n    },\r\n};","import styled from \"styled-components\";\r\n\r\nexport const FormElement = styled.form`\r\n    display: flex;\r\n    grid-column: 2;\r\n    margin: 10px 0;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        flex-direction: column;\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n    flex-grow: 4;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    margin-left: 20px;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        margin: 0 0 10px;\r\n        width: 90%;\r\n    }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    padding: 10px;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        margin-bottom: 10px;\r\n        width: 90%;\r\n    }\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport { FormElement, FormButton, FormInput } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormElement onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie</FormButton>\r\n        </FormElement>\r\n    );\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    padding: 10px;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.gray};\r\n    margin-bottom: 10px;\r\n    align-items: center;\r\n    word-break: break-all;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `}\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✓\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    &#128465;\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default TaskList;","const Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsList = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 14px; \r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    background: transparent;\r\n    transition: 0.3s;\r\n    \r\n    &:hover {\r\n            color: ${({ theme }) => theme.color.lightTeal};;\r\n        }\r\n\r\n    &: active: {\r\n        color: ${({ theme }) => theme.color.activeTeal};;\r\n    }\r\n\r\n    &: disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`;\r\n","import { ButtonsList, Button } from \"./styled\";\r\n\r\nexport const Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <ButtonsList>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={toggleHideDone} >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </ButtonsList>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const SectionElement = styled.section`\r\n    margin: 10px 0;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.boxShadow};\r\n    }\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    margin: 0;\r\n    font-size: 22px;\r\n    border-bottom: 1px solid rgb(240, 236, 236);\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\nfont-size: 22px;\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        padding-bottom: 20px;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n}\r\n`;","import { SectionElement, SectionHeader, SectionTitle, SectionBody } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderConntent }) => (\r\n    <SectionElement>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderConntent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const ContainerElement = styled.main`\r\n    max-width: 900px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n}\r\n`;","import { ContainerElement } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <ContainerElement>\r\n        {children}\r\n    </ContainerElement>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    background-color: rgb(240, 236, 236);\r\n    font-family: 'Montserrat', sans-serif;\r\n  }\r\n`;","import { useState } from \"react\";\nimport { useTasks } from \"../../useTasks\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { theme } from \"../../theme\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Header from \"../../common/Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Container from \"../../common/Container\";\nimport { GlobalStyle } from \"../../GlobalStyle\";\n\nfunction Tasks() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask\n  } = useTasks();\n\n  return (\n    <ThemeProvider theme={theme}>\n    <Container>\n      <GlobalStyle />\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <TaskList\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderConntent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default Tasks;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('tasks')) || [\r\n        { id: 1, content: \"przejść na Reacta\", done: false },\r\n        { id: 2, content: \"zjeść obiad\", done: true },\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task;\r\n        }));\r\n    }\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}