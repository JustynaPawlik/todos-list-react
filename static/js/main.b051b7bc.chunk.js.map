{"version":3,"sources":["common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["ContainerElement","styled","main","Container","children","Header","title","className","SectionElement","section","theme","color","white","boxShadow","SectionHeader","header","breakpoint","mobile","SectionTitle","h2","SectionBody","div","Section","body","extraHeaderConntent","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","TaskPage","useParams","useSelector","getTaskById","content","FormElement","form","FormButton","button","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","Input","value","ref","type","placeholder","onChange","target","List","ul","Item","li","gray","hidden","css","Content","span","Button","toggleDone","green","lightGreen","remove","red","lightRed","TaskList","location","useLocation","query","URLSearchParams","search","get","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","ButtonsList","teal","lightTeal","activeTeal","disabled","Buttons","isEveryTaskDone","areTasksEmpty","Wrapper","history","useHistory","searchParams","delete","set","pathname","toString","TasksPage","Search","activeClassName","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.b051b7bc.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ContainerElement = styled.main`\r\n    max-width: 900px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n}\r\n`;","import { ContainerElement } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <ContainerElement>\r\n        {children}\r\n    </ContainerElement>\r\n);\r\n\r\nexport default Container;","const Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const SectionElement = styled.section`\r\n    margin: 10px 0;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.boxShadow};\r\n    }\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    margin: 0;\r\n    font-size: 22px;\r\n    border-bottom: 1px solid rgb(240, 236, 236);\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\nfont-size: 22px;\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        padding-bottom: 20px;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n}\r\n`;","import { SectionElement, SectionHeader, SectionTitle, SectionBody } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderConntent }) => (\r\n    <SectionElement>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {extraHeaderConntent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Justyna Pawlik\"\r\n            body={\r\n                <>nanana</>\r\n    }\r\n    /></Container>\r\n)","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\n    export const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\nexport const { \r\n    addTask, \r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    removeTask, \r\n    setAllDone, \r\n    fetchExampleTasks,\r\n    setTasks\r\n } = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nconst getTaskById = (state, taskId) => \r\nselectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({content}) => \r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;\r\n\r\n","import Container from \"../../../common/Container\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport  getTaskById from \"../tasksSlice\";\r\n\r\n\r\n\r\nexport const TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n    \r\n    return (\r\n      <Container>\r\n        <Header title=\"Szczegoły zadania\" />\r\n        <Section\r\n          title={task ? task.content : \"Nie znaleziono zadania 😢\"}\r\n          body={\r\n          <><strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n          </>}\r\n        />\r\n      </Container>\r\n      \r\n    );\r\n  };\r\n\r\n\r\n\r\n  ","import styled from \"styled-components\";\r\n\r\nexport const FormElement = styled.form`\r\n    display: flex;\r\n    grid-column: 2;\r\n    margin: 10px 0;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        flex-direction: column;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    padding: 10px;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        margin-bottom: 10px;\r\n        width: 90%;\r\n    }\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    flex-grow: 4;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    margin-left: 20px;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        margin: 0 0 10px;\r\n        width: 90%;\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormElement, FormButton } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Input from '../../Input';\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done:false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormElement onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie</FormButton>\r\n        </FormElement>\r\n    );\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    padding: 10px;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.gray};\r\n    margin-bottom: 10px;\r\n    align-items: center;\r\n    word-break: break-all;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { \r\n    selectTasks, \r\n    toggleTaskDone, \r\n    removeTask, \r\n    selectHideDone,\r\n    selectTasksByQuery\r\n } from \"../../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(\"szukaj\");\r\n\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const dispatch = useDispatch();\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <Link to={`/zadania/${task.id}`}>{task.content}</Link>\r\n                    </Content>\r\n                    <Button\r\n                        remove onClick={() => dispatch(removeTask(task.id))}>\r\n                        &#128465;\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsList = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 14px; \r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    background: transparent;\r\n    transition: 0.3s;\r\n    \r\n    &:hover {\r\n            color: ${({ theme }) => theme.color.lightTeal};;\r\n        }\r\n\r\n    &: active: {\r\n        color: ${({ theme }) => theme.color.activeTeal};;\r\n    }\r\n\r\n    &: disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    toggleHideDone, \r\n    setAllDone, \r\n    fetchExampleTasks,\r\n    selectAreTasksEmpty, \r\n    selectIsEveryTaskDone, \r\n    selectHideDone  } from \"../../tasksSlice\";\r\nimport { ButtonsList, Button } from \"./styled\";\r\n\r\nexport const Buttons = () => {\r\n    \r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsList>\r\n        <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                        Pobierz przykładowe zadania\r\n                    </Button>\r\n                    {!areTasksEmpty && (\r\n                        <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone} \r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsList>\r\n      \r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`;","import Input from '../../Input';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Wrapper } from './styled';\r\n\r\n\r\nexport default () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const query = (new URLSearchParams(location.search)).get(\"szukaj\")\r\n\r\n    const onInputChange = ({target}) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if(target.value.trim() === \"\") {\r\n            searchParams.delete(\"szukaj\");\r\n        } else {\r\n            searchParams.set(\"szukaj\", target.value);\r\n        }\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n        <Input \r\n            placeholder=\"Filtruj zadania\"\r\n            value={query || \"\"}\r\n            onChange={onInputChange}\r\n        />\r\n        </Wrapper>\r\n    );\r\n};","import styled, { ThemeProvider } from \"styled-components\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Header from \"../../../common/Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Container from \"../../../common/Container\";\nimport { TaskPage } from \"../TaskPage\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderConntent={<Buttons />}\n      />\n    </Container>\n    \n  );\n}\n\nexport default TasksPage;\n\n","import { HashRouter, NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport {TaskPage} from './features/tasks/TaskPage';\r\nimport TasksPage from './features/tasks/TasksPage/index';\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <NavLink activeClassName=\"active\" to=\"/zadania\">Zadania</NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink activeClassName=\"active\" to=\"/autor\">O autorze</NavLink>\r\n            </li>\r\n        </ul>\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n    </nav>\r\n    </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText)\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import {all} from \"redux-saga/effects\";\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    background-color: rgb(240, 236, 236);\r\n    font-family: 'Montserrat', sans-serif;\r\n  }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\"; \nimport { theme } from \"./theme\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n    teal: \"hsl(180, 100%, 25%)\",\r\n    lightTeal: \"hsl(180, 100%, 30%)\",\r\n    activeTeal: \"hsl(180, 100%, 35%)\",\r\n    disabled: \"#ccc\",\r\n    gray: \"#aaa\",\r\n    white: \"#fff\",\r\n    green: \"hsl(120, 61%, 34%)\",\r\n    lightGreen: \"hsl(120, 61%, 39%)\",\r\n    red: \"hsl(348, 83%, 47%)\",\r\n    lightRed: \"hsl(348, 83%, 52%)\",\r\n    boxShadow: \"#ddd\",\r\n    },\r\n    breakpoint: {\r\n    mobile : 767\r\n    },\r\n};"],"sourceRoot":""}