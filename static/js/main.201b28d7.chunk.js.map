{"version":3,"sources":["common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","GlobalStyle.js","index.js","theme.js"],"names":["ContainerElement","styled","main","Container","children","Header","title","className","SectionElement","section","theme","color","white","boxShadow","SectionHeader","header","breakpoint","mobile","SectionTitle","h2","SectionBody","div","Section","button","body","extraHeaderConntent","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","setTasks","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectLoading","TaskPage","useParams","useSelector","find","getTaskById","content","FormElement","form","FormButton","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","current","focus","Input","value","ref","type","placeholder","onChange","target","List","ul","Item","li","gray","hidden","css","Content","span","Button","toggleDone","green","lightGreen","remove","red","lightRed","StyledLink","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","searchQueryParamName","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","ButtonsList","teal","lightTeal","activeTeal","disabled","Buttons","isEveryTaskDone","areTasksEmpty","Wrapper","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","ExampleTasksButtton","TasksPage","Search","activeClassName","StyledNavLink","NavLink","attrs","Navigation","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.201b28d7.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ContainerElement = styled.main`\r\n    max-width: 900px;\r\n    margin: 20px auto;\r\n    padding: 10px;\r\n}\r\n`;","import { ContainerElement } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <ContainerElement>\r\n        {children}\r\n    </ContainerElement>\r\n);\r\n\r\nexport default Container;","const Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const SectionElement = styled.section`\r\n    margin: 10px 0;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    box-shadow: 0 0 5px ${({ theme }) => theme.color.boxShadow};\r\n    }\r\n`;\r\n\r\nexport const SectionHeader = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    margin: 0;\r\n    font-size: 22px;\r\n    border-bottom: 1px solid rgb(240, 236, 236);\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\nfont-size: 22px;\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        padding-bottom: 20px;\r\n    }\r\n`;\r\n\r\nexport const SectionBody = styled.div`\r\n    padding: 20px;\r\n}\r\n`;","import { SectionElement, SectionHeader, SectionTitle, SectionBody } from \"./styled\";\r\n\r\nconst Section = ({ title, button, body, extraHeaderConntent }) => (\r\n    <SectionElement>\r\n        <SectionHeader>\r\n            <SectionTitle>{title}</SectionTitle>\r\n            {button}\r\n            {extraHeaderConntent}\r\n        </SectionHeader>\r\n        <SectionBody>\r\n            {body}\r\n        </SectionBody>\r\n    </SectionElement>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Justyna Pawlik\"\r\n            body={\r\n                <>cdn...</>\r\n    }\r\n    /></Container>\r\n)","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => \r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\n    export const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n          },\r\n          fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n              state.tasks = tasks;\r\n              state.loading = false;\r\n          },\r\n          fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n          },\r\n        },\r\n      });\r\n       \r\n\r\nexport const { \r\n    addTask, \r\n    toggleHideDone, \r\n    toggleTaskDone, \r\n    removeTask, \r\n    setAllDone, \r\n    fetchExampleTasks,\r\n    fetchExampleTasksError,\r\n    fetchExampleTasksSuccess,\r\n    setTasks\r\n } = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectLoading = state => state.tasks.loading;\r\n\r\nexport const getTaskById = (state, taskId) => \r\nselectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({content}) => \r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;\r\n\r\n","import Container from \"../../../common/Container\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport  {getTaskById} from \"../tasksSlice\";\r\n\r\nexport const TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n    \r\n    return (\r\n      <Container>\r\n        <Header title=\"Szczegoły zadania\" />\r\n        <Section\r\n          title={task ? task.content : \"Nie znaleziono zadania 😢\"}\r\n          body={!!task && (\r\n          <><strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n          </>\r\n          )}\r\n        />\r\n      </Container>\r\n      \r\n    );\r\n  };\r\n\r\n\r\n\r\n  ","import styled from \"styled-components\";\r\n\r\nexport const FormElement = styled.form`\r\n    display: flex;\r\n    grid-column: 2;\r\n    margin: 10px 0;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n        flex-direction: column;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n    padding: 10px;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-shrink: 0;\r\n        flex-grow: 0;\r\n        margin-bottom: 10px;\r\n        width: 90%;\r\n    }\r\n\r\n    &:hover {\r\n        transform: scale(1.1);\r\n    }\r\n    \r\n    &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    flex-grow: 4;\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    margin-left: 20px;\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        margin: 0 0 10px;\r\n        width: 90%;\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormElement, FormButton } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Input from '../../Input';\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedNewTaskContent,\r\n            done:false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormElement onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie</FormButton>\r\n        </FormElement>\r\n    );\r\n};\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    margin: 0 10px;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    padding: 10px;\r\n    grid-gap: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.gray};\r\n    margin-bottom: 10px;\r\n    align-items: center;\r\n    word-break: break-all;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: ${({ theme }) => theme.color.green};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightGreen};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: ${({ theme }) => theme.color.red};\r\n\r\n        &:hover {\r\n            background: ${({ theme }) => theme.color.lightRed};\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled.li`\r\n    text-decoration: none;\r\n    }\r\n`;","export default \"szukaj\";","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    }\r\n}","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { \r\n    toggleTaskDone, \r\n    removeTask, \r\n    selectHideDone,\r\n    selectTasksByQuery\r\n } from \"../../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const dispatch = useDispatch();\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✓\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove \r\n                        onClick={() => dispatch(removeTask(task.id))}>\r\n                        &#128465;\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsList = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 14px; \r\n}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    border: none;\r\n    background: transparent;\r\n    transition: 0.3s;\r\n    font-size: 14px; \r\n    \r\n    &:hover {\r\n            color: ${({ theme }) => theme.color.lightTeal};;\r\n        }\r\n\r\n    &: active: {\r\n        color: ${({ theme }) => theme.color.activeTeal};;\r\n    }\r\n\r\n    &: disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n}\r\n\r\n@media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button, ButtonsList } from \"../../Button\";\r\nimport {\r\n    toggleHideDone, \r\n    setAllDone, \r\n    selectAreTasksEmpty, \r\n    selectIsEveryTaskDone, \r\n    selectHideDone  } from \"../../tasksSlice\";\r\n\r\nexport const Buttons = () => {\r\n    \r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ButtonsList>\r\n                    {!areTasksEmpty && (\r\n                        <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone} \r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </ButtonsList>\r\n      \r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`;","import Input from '../../Input';\r\nimport { Wrapper } from './styled';\r\nimport searchQueryParamName from '../searchQueryParamName';\r\nimport { useQueryParameter, useReplaceQueryParameter } from '../queryParameters';\r\n\r\n\r\nexport default () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n        const onInputChange = ({ target }) => {\r\n            replaceQueryParameter({\r\n                key: searchQueryParamName,\r\n                value: target.value.trim() !== \"\" ? target.value : undefined,\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n        <Input \r\n            placeholder=\"Filtruj zadania\"\r\n            value={query || \"\"}\r\n            onChange={onInputChange}\r\n        />\r\n        </Wrapper>\r\n    );\r\n};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"../../Button\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\n\r\n\r\nexport const ExampleTasksButtton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    return (\r\n        <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n            {\r\n                loading ? \"ładowanie...\" : \"Pobierz przykładowe zadania\" \r\n            }\r\n        </Button>\r\n    );\r\n};","import styled, { ThemeProvider } from \"styled-components\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Header from \"../../../common/Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\nimport { ExampleTasksButtton } from \"./ExampleTasksButton\";\n\nfunction TasksPage() {\n \n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        button={<ExampleTasksButtton />}\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList/>}\n        extraHeaderConntent={<Buttons />}\n      />\n    </Container>\n    \n  );\n}\n\nexport default TasksPage;\n\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\ndisplay: flex;\r\njustify-content: center;\r\nbackground-color: ${({ theme }) => theme.color.teal};\r\nlist-style: none;\r\nmargin: 0;\r\n`;\r\n\r\nexport const Item =styled.li`\r\nmargin: 20px;\r\n`;\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\ncolor: ${({ theme }) => theme.color.white};\r\ntext-decoration: none;\r\n\r\n    &.${activeClassName} {\r\n        font-weight: bold;;\r\n    }\r\n\r\n    &:hover {\r\n        text-decoration: underline;\r\n       \r\n    }\r\n`;\r\n\r\n\r\n\r\n","import { StyledNavLink, Item, List } from \"./styled\"\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport {TaskPage} from './features/tasks/TaskPage';\r\nimport TasksPage from './features/tasks/TasksPage/index';\r\nimport { Navigation } from \"./Navigation\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n    <Navigation />\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n    </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText)\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksError, fetchExampleTasksSuccess } from \"./tasksSlice\";\r\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak!\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import {all} from \"redux-saga/effects\";\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from './rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  *, ::after, ::before {\r\n    box-sizing: inherit;\r\n  }\r\n  \r\n  body {\r\n    background-color: rgb(240, 236, 236);\r\n    font-family: 'Montserrat', sans-serif;\r\n  }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\"; \nimport { theme } from \"./theme\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n    teal: \"hsl(180, 100%, 25%)\",\r\n    lightTeal: \"hsl(180, 100%, 30%)\",\r\n    activeTeal: \"hsl(180, 100%, 35%)\",\r\n    disabled: \"#ccc\",\r\n    gray: \"#aaa\",\r\n    white: \"#fff\",\r\n    green: \"hsl(120, 61%, 34%)\",\r\n    lightGreen: \"hsl(120, 61%, 39%)\",\r\n    red: \"hsl(348, 83%, 47%)\",\r\n    lightRed: \"hsl(348, 83%, 52%)\",\r\n    boxShadow: \"#ddd\",\r\n    },\r\n    breakpoint: {\r\n    mobile : 767\r\n    },\r\n};"],"sourceRoot":""}